<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

<!-- DB 연결 -->
	<bean	id="dataSource"
			class="org.apache.commons.dbcp.BasicDataSource">
		<property	name="driverClassName" value="oracle.jdbc.driver.OracleDriver"	/>
		<property	name="url"	value="jdbc:oracle:thin:@192.168.201.16:1521:XE" />
		<property	name="username" value="SOLOMONG" />
		<property	name="password"	value="SOLOMONG" />
	</bean>
	
	<!-- MyBatis 설정 -->
	<!-- Mabatis가 DB에 접속할 수 있도록 도오주는 설정 -->
	<bean	id="sqlSessionFactory"
			class="org.mybatis.spring.SqlSessionFactoryBean" >
		<property name="dataSource"	ref="dataSource" />
		<property	name="configLocation"	value="classPath:/mybatis/mybatis.xml" />
	</bean>
	
	<!-- MyBatis가 DB에 Query(SQL)을 실행하고, 결과를 받아오게 도와주는 설정 -->
	<bean	id="sqlSessionTemplate"
			class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg	 name="sqlSessionFactory"	ref="sqlSessionFactory" />
	</bean>
			
	<!-- transaction (Commit: 반영, Rollback: 원복) 설정 -->
	<bean	id="transactionManager"
			class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource"	ref="dataSource" />		
	</bean>
	
	<!-- Rollback 규칙 설정 -->
	<tx:advice id="rollbackRule"	transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="create*" rollback-for="RuntimeException"/>
			<tx:method name="read*" rollback-for="RuntimeException"/>
			<tx:method name="update*" rollback-for="RuntimeException"/>
			<tx:method name="delete*" rollback-for="RuntimeException"/>
			<tx:method name="icrement*" rollback-for="RuntimeException"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- Transaction 대상 설정 -->
	<!-- aspect oriented programming 관점지향형 프로그래밍 : 프로그램 실행 중 어떤 상황이 발생하면 알아서 동작하는 방법 -->
	<aop:config>
		<aop:pointcut	id="pointCut"
						expression="execution(public * com.meeting.www..service.*ServiceImpl.*(..))"/>
		<aop:advisor advice-ref="rollbackRule"	pointcut-ref="pointCut"	/>
	</aop:config>
	
	
</beans>
